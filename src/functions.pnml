/* Begin Functions */
// shamelessly stolen from jp+ shinkansen

switch (FEAT_TRAINS, PARENT, func_is_reversed, vehicle_is_reversed) {return;}

switch (FEAT_TRAINS, SELF, switch_dmu_visual_power, vehicle_is_potentially_powered) {
    1: visual_effect_and_powered(VISUAL_EFFECT_DIESEL, 0, ENABLE_WAGON_POWER);
    visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
}

// Running cost factor depending on speed

switch (FEAT_TRAINS, SELF, runningcostfactor, (1 + current_speed * 5 / max_speed)) {return;}


// For High-Speed Hexie EMUs, speed is limited to 310 km/h IRL, but they can go up to 350 even 380, but with increased running costs
switch (FEAT_TRAINS, SELF, switch_crh_c_cargo_subtype, cargo_subtype) {
    0: return string(STR_310_KMH);
    1: return string(STR_350_KMH);
    return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, SELF, switch_crh_c_speed, cargo_subtype) {
    0: return 310;
    return 350;
}

switch (FEAT_TRAINS, SELF, switch_crh380_cargo_subtype, cargo_subtype) {
    0: return string(STR_310_KMH);
    1: return string(STR_350_KMH);
    2: return string(STR_380_KMH);
    return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, SELF, switch_crh380_speed, cargo_subtype) {
    0: return 310;
    1: return 350;
    return 380;
}

switch (FEAT_TRAINS, SELF, crh350costpower, vehicle_is_potentially_powered) {
    1: return 10;
    return 4;
}

switch (FEAT_TRAINS, SELF, crh380costpower, vehicle_is_potentially_powered) {
    1: return 25;
    return 10;
}

switch (FEAT_TRAINS, PARENT, crhspeedcost, max_speed) {
    0..87: return 0;
    88..98: crh350costpower;
    crh380costpower;
}

/*

BITMASK SHEET

bitmask(0): to return error consists
bitmask(1): restaurant car
bitmask(2): air condition generator car
bitmask(3): conductor car
bitmask(4): brake van

For example,
bitmask_vehicle_info:           bitmask(1, 3);

*/


// Pushpull trains should have locomotives on their front/end, not middle
switch (FEAT_TRAINS, SELF, switch_pushpull_consist_correction, ((position_in_consist < 3) || (position_in_consist_from_end < 3))) {
    1: return bitmask(2);
    return bitmask(0, 2);
}

// Another running cost factor depending on the existence of restaurant car - changed in v0.0.8 - now halves the runing costs of passenger cars instead of elimination
switch (FEAT_TRAINS, PARENT, cafecostfactor, hasbit(bitmask_consist_info, 1)) {
    1: return 1;
    return 2;
}

// Running cost factor of AC Generator Cars (and also locomotives able to supply electricity for cars) - added in v0.0.8 - now varies according to the number of cars with need of air condition (including some passenger cars and a few refrigerator wagons)
// The costs are not coded into AC Generator Cars, but into cars with need of AC.
switch (FEAT_TRAINS, PARENT, accostfactor, hasbit(bitmask_consist_info, 2)) {
    1: return 2;
    return 0;
}

// Cargo age period factor depending on Restaurant Car: attaching restaurant car increases cargo age period of medium and long range passenger cars (i.e. not commuter cars) by 1/4
switch (FEAT_TRAINS, PARENT, cafedecayfactor, hasbit(bitmask_consist_info, 1)) {
    1: return 5;
    return 4;
}

// Cargo age period factor depending on Air Conditioner: If the train is not pulled by an locomotive able to supply electricity for cars, nor is there an air condition generator car (bitmask 2), the cargo_age_period of this passenger car reduces by 1/5.
switch (FEAT_TRAINS, PARENT, acdecayfactor, hasbit(bitmask_consist_info, 2)) {
    0: return 4;
    return 5;
}

// Electric Engines MUST BE ELECTRIFIED to supply electricity

switch (FEAT_TRAINS, SELF, airconditioner, vehicle_is_powered) {
    1: return bitmask(2);
    return 0;
}

// Only allow/disallow attaching wagons from China Set: Trains, notice GRF ID is little-endian
switch (FEAT_TRAINS, SELF, onlyallowcst, grfid) {
    str2number("\5F\5F\03\00"): return CB_RESULT_ATTACH_ALLOW_IF_RAILTYPES;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlydisallowcst, grfid) {
    str2number("\5F\5F\03\00"): return CB_RESULT_ATTACH_DISALLOW;
    return CB_RESULT_ATTACH_ALLOW_IF_RAILTYPES;
}

switch (FEAT_TRAINS, SELF, crhwagon, vehicle_type_id) {
    1024..1035: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, crhwagonxl, vehicle_type_id) {
    1024..1035: onlyallowcst;
    1051: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, crhwagonsleeper, vehicle_type_id) {
    1024..1035: onlyallowcst;
    1038..1040: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, crhsleeperonly, vehicle_type_id) {
    1024: onlyallowcst;
    1035: onlyallowcst;
    1037: onlyallowcst;
    1039: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, crsleeperonly, vehicle_type_id) {
    1024: onlyallowcst;
    1027: onlyallowcst;
    1035: onlyallowcst;
    1037: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, crh_wagons_longitudinal_sleeper, vehicle_type_id) {
    1035: onlyallowcst;
    1037: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, crhwagonsleeperxl, vehicle_type_id) {
    1024..1035: onlyallowcst;
    1038..1040: onlyallowcst;
    1051: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, earlymuwagon, vehicle_type_id) {
    1041..1050: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, earlymuwagonxl, vehicle_type_id) {
    1041..1051: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, cr200jwagon, vehicle_type_id) {
    1024..1037: onlyallowcst;
    1039: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, cr200jwagonxl, vehicle_type_id) {
    1024..1037: onlyallowcst;
    1039: onlyallowcst;
    1051: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, muhead, vehicle_type_id) {
    1024..1051: onlyallowcst;
    8192..14335: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, cargomuhead, vehicle_type_id) {
    1536..1633: onlyallowcst;
    15616..16127: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, singlemu, vehicle_type_id) {
    1024..1051: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlyzezyzec, vehicle_type_id) {
    1024..1025: onlyallowcst;
    1035: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlyzezy, vehicle_type_id) {
    1024..1025: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlyze, vehicle_type_id) {
    1024: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlyzy, vehicle_type_id) {
    1025: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlycargo, vehicle_type_id) {
    1536: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlycrh6aa, vehicle_type_id) {
    9230: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlycrh3aa, vehicle_type_id) {
    9265: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, SELF, onlycj6, vehicle_type_id) {
    9266: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}
switch (FEAT_TRAINS, SELF, onlycrh6aacinova, vehicle_type_id) {
    9267: onlyallowcst;
    return CB_RESULT_ATTACH_DISALLOW;
}


switch (FEAT_TRAINS, SELF, locowagon, vehicle_type_id) {
    1024..1051: onlydisallowcst;
    8192..14335: onlydisallowcst;
    return CB_RESULT_ATTACH_ALLOW_IF_RAILTYPES;
}

switch (FEAT_TRAINS, SELF, switch_visual_effect_and_powered, ((position_in_articulated_veh == 0) && !func_is_reversed()) || ((position_in_articulated_veh_from_end == 0) && func_is_reversed()) ) {
	1: return visual_effect_and_powered(VISUAL_EFFECT_ELECTRIC, 0, ENABLE_WAGON_POWER);
	return visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
}


// MUs need at least 4 cars to start
switch (FEAT_TRAINS, SELF, mu4car, num_vehs_in_consist < 12) {
    1: return string(STR_TOO_SHORT);
    return CB_RESULT_NO_TEXT;
}
// MUs need at least 2 and at most 16 cars to start

switch (FEAT_TRAINS, SELF, mu2to16car, (num_vehs_in_consist < 6) || (num_vehs_in_consist > 48)) {
    1: return string(STR_MUST_BE_2_TO_16_CARS);
    return CB_RESULT_NO_TEXT;
}

// MUs need at least 4 and at most 24 cars to start

switch (FEAT_TRAINS, SELF, mu4to24car, (num_vehs_in_consist < 12) || (num_vehs_in_consist > 72)) {
    1: return string(STR_MUST_BE_4_TO_24_CARS);
    return CB_RESULT_NO_TEXT;
}

// MUs need at least 4 and at most 12 cars to start

switch (FEAT_TRAINS, SELF, mu4to12car, (num_vehs_in_consist < 12) || (num_vehs_in_consist > 36)) {
    1: return string(STR_MUST_BE_4_TO_12_CARS);
    return CB_RESULT_NO_TEXT;
}

// MUs need at least 6 and at most 16 cars to start

switch (FEAT_TRAINS, SELF, mu4to16car, (num_vehs_in_consist < 12) || (num_vehs_in_consist > 72)) {
    1: return string(STR_MUST_BE_4_TO_16_CARS);
    return CB_RESULT_NO_TEXT;
}

// MUs need at least 8 and at most 24 cars to start

switch (FEAT_TRAINS, SELF, mu8to24car, (num_vehs_in_consist < 12) || (num_vehs_in_consist > 72)) {
    1: return string(STR_MUST_BE_8_TO_24_CARS);
    return CB_RESULT_NO_TEXT;
}

// Long MUs need at least 4 cars to start
switch (FEAT_TRAINS, SELF, mu8car, num_vehs_in_consist < 24) {
    1: return string(STR_TOO_SHORT);
    return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, SELF, mu481216car, num_vehs_in_consist) {
    12: return CB_RESULT_NO_TEXT;
    24: return CB_RESULT_NO_TEXT;
    36: return CB_RESULT_NO_TEXT;
    48: return CB_RESULT_NO_TEXT;
    return string(STR_MUST_BE_4_8_12_16_CARS);
}

switch (FEAT_TRAINS, SELF, mu5to17car, num_vehs_in_consist) {
    15..51: return CB_RESULT_NO_TEXT;
    return string(STR_MUST_BE_5_TO_17_CARS);
}

/* LENGTHS */

// Standard 2-8-2 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_8_2, position_in_articulated_veh % 3) {
        1: return 8;
        return 2;
    }

// Standard 2-7-2 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_7_2, position_in_articulated_veh % 3) {
        1: return 7;
        return 2;
    }

// Standard 2-6-2 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_6_2, position_in_articulated_veh % 3) {
        1: return 6;
        return 2;
    }

// Standard 2-5-2 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_5_2, position_in_articulated_veh % 3) {
        1: return 5;
        return 2;
    }

// Standard 2-4-2 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_4_2, position_in_articulated_veh % 3) {
        1: return 4;
        return 2;
    }

// Standard 2-3-2 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_3_2, position_in_articulated_veh % 3) {
        1: return 3;
        return 2;
    }

// Standard 2-2-2 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_2_2, position_in_articulated_veh % 3) {
        1: return 2;
        return 2;
    }

// Standard 1-3-1 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_1_2, position_in_articulated_veh % 3) {
        1: return 1;
        return 2;
    }

// Standard 2-1-1 Length
    switch (FEAT_TRAINS, SELF, switch_length_2_1_1, position_in_articulated_veh % 3) {
        0: return 2;
        return 1;
    }

// For steam locos - 2-6-4
    switch (FEAT_TRAINS, SELF, switch_length_2_6_4, position_in_articulated_veh % 3) {
        0: return 2;
        1: return 6;
        return 4;
    }

// For steam locos - 2-6-6
    switch (FEAT_TRAINS, SELF, switch_length_2_6_6, position_in_articulated_veh % 3) {
        0: return 2;
        1: return 6;
        return 6;
    }
/* End Functions */


switch (FEAT_TRAINS, SELF, too_many_graphics_12, position_in_articulated_veh % 3) {
    1: spriteset_too_many_12;
    empty_sprites;
}

//For JINLUN DMU
switch (FEAT_TRAINS, SELF, switch_25dt_jinlun_cargo_subtype, cargo_subtype) {
    0: return string(STR_BUILD_YEAR);
    1: return string(STR_EARLIER);
    2: return string(STR_LATER);
    return CB_RESULT_NO_TEXT;
}
